push ebp
	mov ebp, esp


Folosește un for și putchar() pentru a afișa fiecare caracter manual, fără să te bazezi pe \0:

#include <stdio.h>
#include <stdlib.h>

char *get_magic();

int main() {
	char *message = get_magic();
	
	// Știm că sunt 66 de octeți de afișat
	for (int i = 0; i < 66; i++) {
		putchar(message[i]);
	}
	putchar('\n');

	return 0;
}
AFISAM  TOT SIRUL INDIFERENT DE \0




#include <stdio.h>
#include <stdlib.h>

char decode_me[] = {-90, -112, -118, -33, -103, -112, -112, -109};

int main() {
    unsigned char *message = malloc(9 * sizeof(*message));
    if (!message) return 1;

    for (int i = 0; i < 8; i++) {
        message[i] = ~decode_me[i];
    }
    message[8] = '\0';  // asigurăm terminatorul de șir

    printf("%s\n", message);	

    free(message);
    return 0;
}
DAM ~ LA FIECARE ELEM  DIN SIR.


Pentru a afla ce bibliotecă C standard este folosită, folosește comanda:
ldd crackme


Mută definiția lui message din .rodata într-o secțiune scrisă, cum ar fi .data:
section .data
	message db 'Starting machine...', 0, 0

section .rodata
	fmt db '%s', 0
DACA AVEM SEG FAULT POATE ESTE CA MODIFICAM O VAR DIN .RODATA DECI TRB SA O MUTAM IN .DATA


section .data
	; WARNING! You must not define any new global variables.
	attack_location db "Ardhalis", 0
	read_fmt db "%d%d", 0

section .text
extern broadcast
extern scanf
global main

main:
	push ebp
	mov ebp, esp

	sub esp, 12              ; alocăm 12 bytes pentru structura info (3x4 bytes)

	lea eax, [esp]           ; eax -> struct info
	push eax
	push read_fmt
	call scanf
	add esp, 8               ; curățăm parametrii

	mov eax, [esp]           ; eax = month (în locul esp[0])
	mov [esp], eax           ; redundant dar explicit

	mov eax, [esp + 4]       ; eax = day
	mov [esp + 4], eax       ; redundant dar explicit

	mov dword [esp + 8], attack_location ; setăm pointerul location

	lea eax, [esp]           ; eax -> struct info
	push eax
	call broadcast
	add esp, 4               ; curățăm parametru

	leave
	ret

implementare INT FILTER (INT *SRC_ARRAY, INT SRC_ARRAY_LEN, INT *DEST_ARRAY)
section .text
global filter
extern printf

; int filter(int *src_array, int src_array_len, int *dest_array)
filter:
    push ebp
    mov ebp, esp

    mov esi, [ebp + 8]   ; esi = src_array
    mov ecx, [ebp + 12]  ; ecx = src_array_len
    mov edi, [ebp + 16]  ; edi = dest_array

    xor eax, eax         ; eax = counter for elements copied

.next:
    cmp ecx, 0
    je .done

    mov edx, [esi]       ; edx = *src_array
    mov ebx, edx
    mov ecx, 42
    xor edx, edx
    div ecx              ; eax = ebx / 42, edx = ebx % 42

    test edx, edx        ; dacă restul == 0, e divizibil
    jnz .skip

    mov [edi], ebx       ; salvează valoarea în dest_array
    add edi, 4           ; mergi la următorul element
    inc eax              ; crește numărul de elemente copiate

.skip:
    add esi, 4           ; următorul element din src_array
    mov ecx, [ebp + 12]
    sub ecx, eax
    jmp .next

.done:
    pop ebp
    ret

SI ASA O APELAM (FILTER E TOT IN ACELASI FISIER, DEASUPRA MAINULUI)

section .data
	magic_number equ 42
	
	; WARNING! You may not use these values directly in filter!
	raw_password dd 43, 6, 10, 4242, 82, 982, 165, 424242, 12, 8484, 4242424242, 42
	raw_password_len equ 12
	final_password times 12 dd 0
	print_fmt db "%d ", 0

section .text
extern printf
extern filter
global main

main:
	push ebp
	mov ebp, esp

	; Apelăm: filter(raw_password, raw_password_len, final_password)
	push final_password
	push raw_password_len
	push raw_password
	call filter
	add esp, 12              ; curățăm stiva

	mov ecx, eax             ; eax conține numărul de elemente copiate

	mov esi, final_password ; pointer în vectorul filtrat

.loop:
	cmp ecx, 0
	je .done

	push dword [esi]       ; valoare de afișat
	push print_fmt
	call printf
	add esp, 8

	add esi, 4
	dec ecx
	jmp .loop

.done:
	leave
	ret



CUM INTERSCHIMBAM ELEM DIN STRUCT PT MINIMIZAREA DIMENSIUNII
STRUCT ORIGINAL
struct s{
	char a;     // 1 byte
	int b;      // 4 bytes
	char c[5];  // 5 bytes
	int d;      // 4 bytes
	short e;    // 2 bytes
	char f;     // 1 byte
	short g;    // 2 bytes
	char h;     // 1 byte
};
SI DUPA
struct s {
	int b;
	int d;
	short e;
	short g;
	char a;
	char f;
	char h;
	char c[5];
};
VERIFICAM PUNAND IN MAIN 
printf("Size of struct s: %u\n", (unsigned)sizeof(struct s));
SI RULAND SCRIPTUL (GCC... A.OUT)

b) [1p] Declarați o variabilă numită my_var în fișierul file.c, care să fie alocată în secțiunea .rodata și simbolul
său să fie neexportat.
static const char my_var[] = "Hello from .rodata!";
VERIFICARE:
gcc -o check_rodata file.c
objdump -h check_rodata

Pentru a căuta simbolul my_var și a verifica că este neexportat (adică simbolul nu apare în tabela de simboluri externe), folosește:
nm -C --defined-only check_rodata | grep my_var

readelf -S check_rodata | grep .rodata
readelf -s check_rodata | grep my_var



d) [3p] Completați funcția void solve(struct text letter) din fișierul all_pointers.c pentru a repara eroarea
de la rulare astfel încât să se afișeze conținutul textului din letter după aplicarea funcției number_lines.
• secvența de apeluri number_lines și print_text trebuie să rămână neschimbată!
DECI ERORILE DE RULARE  POT FI  DIN CAUZA CA N AM DAT MALLOC

  // Alocăm memorie pentru fiecare linie pentru a putea modifica textul
    for (int i = 0; i < letter.line_count; i++) {
        // Alocăm suficient spațiu pentru numărul liniei + textul original
        size_t len = strlen(letter.lines[i]) + 10;  // +10 pentru a adăuga numărul liniei
        letter.lines[i] = (char *)malloc(len * sizeof(char));

        // Dacă alocarea a eșuat, ieșim din funcție
        if (letter.lines[i] == NULL) {
            printf("Memory allocation failed!\n");
            return;
        }
    }


SCHIMBAM LITERELE MICI DUPA FORMULA  str[i] = '0' + str[i] % 8.
transform_string:
    push ebp
    mov ebp, esp

    ; Inițializăm indexul i = 0
    xor ecx, ecx          ; ecx va fi folosit ca index i (ecx = 0)

.loop:
    ; Verificăm dacă am ajuns la finalul șirului (terminatorul null '\0')
    mov al, byte [eax + ecx]   ; al = str[i]
    test al, al                ; Verificăm dacă al este '\0'
    jz .done                    ; Dacă da, ieșim din buclă

    ; Verificăm dacă caracterul este literă mică
    cmp al, 'a'                ; Verificăm dacă al >= 'a'
    jl .next                    ; Dacă al < 'a', trecem la următorul caracter
    cmp al, 'z'                ; Verificăm dacă al <= 'z'
    jg .next                    ; Dacă al > 'z', trecem la următorul caracter

    ; Transformăm litera mică în cifra corespunzătoare
    sub al, 'a'                ; al = str[i] - 'a' (valoare între 0 și 25)
    mov bl, al                 ; bl = str[i] - 'a'
    and bl, 7                  ; bl = (str[i] - 'a') % 8
    add bl, '0'                ; bl = '0' + (str[i] - 'a') % 8
    mov byte [eax + ecx], bl   ; Înlocuim caracterul original cu cifra

.next:
    inc ecx                    ; Incrementăm indexul i
    jmp .loop                   ; Continuăm bucla

.done:
    leave
    ret
SI FOLOSIM TRANSFORM_STRING CU VARIABILA QUESTION
 lea eax, [question]
  call transform_string



b) [4p] Scrieți o funcție cu semnătura void apply_digit_sum(int *arr, int size) care va aplica funcția externă void sum_digits(int *n) pe fiecare element al vectorului arr.
• spre exemplu, pentru array-ul {123, 456, 789, 101112, 131415} se va aplica funcția sum_digits pe fiecare
element, rezultând array-ul {6, 15, 24, 6, 15}

apply_digit_sum:
    push ebp
    mov ebp, esp

    ; Parametru 1: adresa lui arr
    ; Parametru 2: dimensiunea array-ului (size)
    
    ; Incepem cu indexul 0
    xor ecx, ecx            ; ecx va fi indexul (0)

.loop:
    ; Verificăm dacă am ajuns la sfârșitul array-ului
    cmp ecx, [ebp + 8]      ; Comparăm indexul cu dimensiunea array-ului (size)
    jge .done                ; Dacă ecx >= size, ieșim din buclă

    ; Apelăm sum_digits pe arr[ecx]
    lea eax, [ebp + 12]      ; Adresa lui arr[0]
    add eax, ecx             ; Ne mutăm la elementul curent arr[ecx]
    push eax                 ; Stocăm adresa elementului în stivă
    call sum_digits          ; Apelăm funcția sum_digits
    add esp, 4               ; Curățăm stiva după apel

    inc ecx                  ; Incrementăm indexul
    jmp .loop                ; Continuăm bucla

.done:
    leave
    ret

; Apelăm funcția apply_digit_sum
     lea eax, [arr]             ; Obținem adresa primului element din arr
    push arr_len              ; Adăugăm dimensiunea array-ului pe stivă
    call apply_digit_sum 

UN EXEMPLU DE A AFISA CU PRINTF
extern printf

main:
    push ebp
    mov ebp, esp

    ; Apelăm funcția apply_digit_sum folosind array-ul `arr` și dimensiunea `arr_len`
    lea eax, [arr]             ; Obținem adresa primului element din arr
    push arr_len              ; Adăugăm dimensiunea array-ului pe stivă
    call apply_digit_sum      ; Apelăm apply_digit_sum pentru a procesa fiecare element

    ; Afișăm rezultatele array-ului modificat
    mov ecx, arr_len          ; Setăm numărul de elemente (dimensiunea array-ului)
    lea ebx, [arr]            ; Adresa primului element din array

print_loop:
    mov eax, [ebx]            ; Înregistrăm valoarea curentă în eax
    push eax                  ; Punem valoarea pe stivă
    push int_fmt              ; Punem formatul pentru printf pe stivă
    call printf               ; Apelăm printf pentru a afișa valoarea
    add esp, 8                ; Curățăm stiva (2 elemente: eax și formatul)

    add ebx, 4                ; Trecem la următorul element din array
    loop print_loop           ; Repetăm pentru toate elementele din array

    leave
    ret


c) [3p] Alocați pe stivă array-ul {45, 64, 911, 1234, 52344} și aplicați funcția apply_digit_sum pe el. Afișați
array-ul rezultat folosind funcția printf.

 ; Alocăm un array de 5 int-uri pe stivă
    sub esp, 20  ; Alocăm 20 de octeți pentru 5 int-uri (5 * 4 = 20 octeți)

    ; Inițializăm array-ul
    mov dword [esp], 45       ; array[0] = 45
    mov dword [esp + 4], 64   ; array[1] = 64
    mov dword [esp + 8], 911  ; array[2] = 911
    mov dword [esp + 12], 1234; array[3] = 1234
    mov dword [esp + 16], 52344; array[4] = 52344

    ; Apelăm funcția apply_digit_sum pentru array-ul de 5 elemente
    lea eax, [esp]            ; Obținem adresa primului element al array-ului
    push 5                    ; Dimensiunea array-ului (5 elemente)
    call apply_digit_sum      ; Apelăm apply_digit_sum

    ; Afișăm rezultatele array-ului modificat
    mov ecx, 5                ; Setăm numărul de elemente (dimensiunea array-ului)
    lea ebx, [esp]            ; Adresa primului element din array

print_loop:
    mov eax, [ebx]            ; Înregistrăm valoarea curentă în eax
    push eax                  ; Punem valoarea pe stivă
    push int_fmt              ; Punem formatul pentru printf pe stivă
    call printf               ; Apelăm printf pentru a afișa valoarea
    add esp, 8                ; Curățăm stiva (2 elemente: eax și formatul)

    add ebx, 4                ; Trecem la următorul element din array
    loop print_loop           ; Repetăm pentru toate elementele din array

    ; Curățăm stiva alocată pentru array
    add esp, 20

    leave
    ret


AFISARE STRUCT 
struct stud {
	char name[256];
	unsigned char grades[3];
	float mean;
};
void print_addresses(struct stud *stud)
{
	printf("stud->name: %p\n", (void *)&(stud->name));
	printf("stud->grades: %p\n", (void *)&(stud->grades));
	printf("stud->mean: %p\n", (void *)&(stud->mean));
}
void print_stud(struct stud *stud)
{
	char *name_ptr = (char *)stud; // stud->name începe la offset 0
	unsigned char *grades_ptr = (unsigned char *)(name_ptr + 256); // grades după name
	float *mean_ptr = (float *)(grades_ptr + 3); // mean după grades

	printf("Name: %s\n", name_ptr);
	printf("Grades: %d %d %d\n", *(grades_ptr), *(grades_ptr + 1), *(grades_ptr + 2));
	printf("Mean: %f\n", *mean_ptr);
}
c) [3p] Completați TODO-urile din cadrul funcției print_vec astfel încât să afișați, folosind funcția print_struct
de la task-ul b), fiecare element al vectorului primit ca argument
void print_vec(struct stud *studs, int n)
{
	if (n <= 0)
		return;

	print_stud(studs);               // Afișează primul element
	print_vec(studs + 1, n - 1);     // Apelează recursiv pentru următorul
}
d) [3p] Completați TODO-urile din cadrul funcției toggle_case care transformă șirul primit ca argument astfel:
caracterele upper-case devin lower-case, iar caracterele lower-case devin upper-case (exemplu, șirul de caractere
“Ana” va deveni, în urma transformării, șirul de caractere “aNA”). Pentru acest task, este obligatoriu să
folosiți doar operații binare pentru transformarea caracterelor.
void toggle_case(char *name)
{
    while (*name) {
        char c = *name;

        // Verificăm dacă e literă (A-Z sau a-z)
        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {
            *name = c ^ 0x20; // Inversare de caz
        }

        name++;
    }
}



a) [3p] Completați funcția print_struct_elem astfel încât aceasta să afișeze fiecare element al vectorului grades
din structura primită ca parametru.
print_struct_elem:
	push ebp
	mov ebp, esp

	mov edx, [ebp + 8]         ; edx = pointer to struct student_t

	mov ebx, [edx + id]        ; student ID
	PRINTF32 `ID: %d\n\x0`, ebx

	lea ebx, [edx + grades]    ; ebx = address of grades[]
	PRINTF32 `Grades: \x0`

	xor ecx, ecx               ; ecx = index

print_grades_loop:
	cmp ecx, 3
	jge print_grades_done

	movzx eax, word [ebx + ecx*2]  ; load short (2 bytes) grade into eax
	PRINTF32 `%d \x0`, eax

	inc ecx
	jmp print_grades_loop

print_grades_done:
	PRINTF32 `\n\x0`

	xor ebx, ebx
	mov bx, word [edx + final]
	PRINTF32 `Final: %d\n\x0`, ebx

	leave
	ret


compute_final:
	push ebp
	mov ebp, esp

	; Get parameters
	mov eax, [ebp + 8]    ; eax = pointer to grades[]
	mov ecx, [ebp + 12]   ; ecx = length

	xor edx, edx          ; edx = sum = 0
	xor ebx, ebx          ; ebx = index

.sum_loop:
	cmp ebx, ecx
	jge .done_sum

	movzx esi, word [eax + ebx*2] ; load short (grade) into esi
	add edx, esi

	inc ebx
	jmp .sum_loop


b) [3p] Completați funcția compute_final care primește un vector de valori short și dimensiunea acestuia și calculează cel mai apropiat număr întreg pornind de la media aritmetică a numerelor din vector.
.done_sum:
	; Rotunjim media: (sum + len/2) / len
	mov eax, edx          ; eax = sum
	add eax, ecx
	shr ecx, 1            ; ecx = len / 2
	add eax, ecx          ; sum + len / 2
	shl ecx, 1            ; readjust ecx to len
	div ecx               ; eax = (sum + len/2) / len

	; return in eax
	pop ebp
	ret



c) [4p] Completați funcția check_final_grade care primește un vector de elemente de tip struct student_t și
dimensiunea acestuia și parcurge fiecare element, verificând câmpul final ca să fie cel mai apropiat întreg al
mediei aritmetice a elementelor din vectorul grades[]. Dacă nota finală nu corespunde, corectați câmpul din
structură. În rezolvarea acestui task, veți folosi funcțiile print_struct_elem și compute_final.
check_final_grade:
	push ebp
	mov ebp, esp

	mov esi, [ebp + 8]    ; esi = pointer to students array
	mov ecx, [ebp + 12]   ; ecx = number of students
	xor ebx, ebx          ; index = 0

.loop_students:
	cmp ebx, ecx
	jge .done

	; edi = pointer to current student = esi + ebx * sizeof(student_t)
	mov edi, esi
	add edi, ebx
	shl ebx, 2             ; ebx = ebx * 4
	add edi, ebx           ; edi = esi + ebx * 4 = esi + ebx * 12
	shr ebx, 2             ; restore ebx

	; push arguments to compute_final(grades, 3)
	push 3
	lea eax, [edi + 4]     ; offset of grades field
	push eax
	call compute_final
	add esp, 8             ; clean arguments

	; eax = correct final grade
	movzx edx, word [edi + 10] ; edx = current final
	cmp dx, ax
	je .no_update

	; update final grade
	mov [edi + 10], ax

.no_update:
	; push student ptr
	push edi
	call print_struct_elem
	add esp, 4

	inc ebx
	jmp .loop_students

.done:
	pop ebp
	ret



[2p] Șirul de octeți raw_data reprezintă o înșiruire de 10 structuri de tip Person. Implementați funcția
show_raw_persons care afișează vârsta și numele fiecărei persoane din șirul de caractere primit ca argument
 for (int i = 0; i < 10; i++) {
        struct Person *p = (struct Person *)(arr + i * sizeof(struct Person));
        printf("Age: %d, Name: %s\n", p->age, p->name);
    }

b) [2p] Implementați funcția allocate_persons care alocă un vector de num structuri de tip Person și le inițializează
cu primele num elemente din șirul de biți raw_data. Întoarceți rezultatul alocarii. Afișați apoi vectorul de
structuri rezultat prin implementarea funcției show_persons.
struct Person *allocate_persons(char *arr, int num)
{
    struct Person *persons = malloc(num * sizeof(struct Person));
    if (!persons) {
        return NULL;
    }

    for (int i = 0; i < num; i++) {
        struct Person *src = (struct Person *)(arr + i * sizeof(struct Person));
        persons[i] = *src;  // copiem întreaga structură
    }

    return persons;
}
void show_persons(struct Person *p, int num)
{
    for (int i = 0; i < num; i++) {
        printf("Age: %d, Name: %s\n", p[i].age, p[i].name);
    }
}


c) [3p] Implementați funcția sort_persons care ordonează crescător în funcție de numărul de biți setați din vârstă
pentru persoanele din vectorul alocat la punctul anterior. În caz că numerele de biți setați din vârstă sunt egale,
sortarea se face după ordinea alfabetică a numelor. Afișați rezultatul folosind funcția show_persons.
int count_set_bits(int n)
{
    int count = 0;
    while (n) {
        // Îndepărtează cel mai mic bit setat (1) din numărul n
        n = n & (n - 1);
        count++;
    }
    return count;
}

void sort_persons(struct Person *p, int num)
{
    for (int i = 0; i < num - 1; i++) {
        for (int j = i + 1; j < num; j++) {
            // Comparație bazată pe numărul de biți setați din vârstă
            int bits_i = count_set_bits(p[i].age);
            int bits_j = count_set_bits(p[j].age);
            
            if (bits_i > bits_j || (bits_i == bits_j && strcmp(p[i].name, p[j].name) > 0)) {
                // Schimbăm persoanele i și j
                struct Person temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
}


d) [3p] Implementați funcția shorten_persons care va scurta toate numele din vectorul de persoane sortat obținut
mai sus, aplicând următoarea transformare. Pentru toate numele care au strict mai mult de trei litere se păstrează
prima și ultima literă, iar restul literelor sunt înlocuite de numărul literelor. Numele cu mai puțin de 3 litere nu
sunt afectate. Afișați noul vector obținut folosind funcția show_persons.
Spre exemplu, numele “Anais” devine “A5s”, iar numele “Ana” rămâne neschimbat.


void shorten_persons(struct Person *p, int num)
{
    for (int i = 0; i < num; i++) {
        char *name = p[i].name;  // obținem numele persoanei curente
        int len = strlen(name);   // aflăm lungimea numelui
        
        if (len > 3) {
            // Dacă numele are mai mult de 3 caractere, aplicăm scurtarea
            char shortened_name[16];  // presupunem că numele nu vor depăși 15 caractere (datorită dimensiunii fixed de 16)
            
            shortened_name[0] = name[0];  // prima literă
            int middle_len = len - 2;     // numărul de litere intermediare
            
            // Dacă numele are mai mult de 3 litere, punem numărul de litere intermediare
            sprintf(&shortened_name[1], "%d", middle_len);
            
            // Adăugăm ultima literă
            shortened_name[1 + strlen(&shortened_name[1])] = name[len - 1];
            shortened_name[2 + strlen(&shortened_name[1])] = '\0';  // terminăm șirul de caractere
            
            // Copiem numele scurtat în structura persoanei
            strcpy(p[i].name, shortened_name);
        }
    }
}




a) [3p] Implementaţi funcţia int is_divisor(unsigned int n, unsigned int i) care întoarce valoarea 1 dacă
i este un divizor al numărului n şi 0 în rest. Afişaţi rezultatul întors folosind funcţia printf.
is_divisor:
    push ebp
    mov ebp, esp

    ; Parametrii sunt în stiva:
    ; n - [ebp+8]
    ; i - [ebp+12]

    mov eax, [ebp+8]    ; Încărcăm n în eax
    mov ebx, [ebp+12]   ; Încărcăm i în ebx
    xor edx, edx        ; Setăm edx la 0 (pentru a calcula restul)

    div ebx              ; Împărțim eax la ebx. Rezultatul merge în eax, restul în edx.

    ; Verificăm dacă restul (edx) este 0
    cmp edx, 0
    je divisor          ; Dacă restul este 0, înseamnă că i este divizor al lui n
    xor eax, eax        ; Dacă nu este divizor, setăm eax la 0
    jmp done

divisor:
    mov eax, 1          ; Dacă este divizor, setăm eax la 1

done:
    leave
    ret

si il afisam folosind printf:
push dword [k]
    push dword [N]
    call is_divisor
    add esp, 8
    push eax
    push int_fmt_newline
    call printf
    add esp, 8




[3p] Implementaţi funcţia int count_divisors(unsigned int n) care calculează numărul de divizori ai
numărului n. Nu vom lua în calcul 1 şi numărul însuşi atunci când numărăm divizorii. Folosiţi funcţia printf
pentru afişare. Utilizați funcţia is_divisor pentru a număra divizorii.
count_divisors:
    push ebp
    mov ebp, esp

    ; Parametrii:
    ; n - [ebp+8]

    mov eax, 0           ; Contorul de divizori
    mov ebx, 2           ; Începem de la 2 (nu considerăm 1)
    
count_loop:
    cmp ebx, [ebp+8]     ; Comparăm i cu n
    jge done_counting    ; Dacă i >= n, ieșim din buclă

    push ebx             ; Salvăm i pe stivă
    push [ebp+8]         ; Salvăm n pe stivă
    call is_divisor      ; Apelăm funcția is_divisor(n, i)
    add esp, 8           ; Curățăm stiva

    cmp eax, 1           ; Dacă eax este 1 (adică i este divizor)
    jne not_divisor
    inc eax              ; Incrementăm contorul de divizori

not_divisor:
    inc ebx              ; Incrementăm i
    jmp count_loop       ; Continuăm bucla

done_counting:
    ; Afișăm rezultatul
    push eax             ; Salvăm rezultatul pe stivă
    push int_fmt_newline ; Formatul pentru afișare
    call printf
    add esp, 8           ; Curățăm stiva

    leave
    ret







c) [4p] Rezervaţi memorie în secţiunea .bss pentru un şir de întregi res cu len elemente. Completaţi acest şir
astfel încât fiecare element va reprezenta numărul de divizori ai elementului de pe poziţia corespunzătoare din
şirul arr declarat în secţiunea .data. Afişaţi folosind funcția printf elementele şirului de întregi res cu len
elemente, cu toate elementele pe aceeaşi linie, separate de către un spaţiu.

section .bss
res resd len  ; Rezervă un șir de `len` elemente de tip `int`
   mov ecx, 0                  ; Contor pentru indexul array-ului
.loop_arr:
    cmp ecx, len                ; Verifică dacă am parcurs toate elementele
    jge .end_loop
    mov eax, [arr + ecx*4]      ; Încarcă elementul arr[ecx]
    push eax                     ; Salvează numărul în stivă
    call count_divisors         ; Numără divizorii
    add esp, 4                  ; Curăță stiva
    mov [res + ecx*4], eax      ; Stochează rezultatul în res[ecx]
    inc ecx                     ; Trecem la următorul element
    jmp .loop_arr
.end_loop:

    ; Afișează rezultatele folosind printf
    mov ecx, 0                  ; Contor pentru afișarea elementelor
.loop_print:
    cmp ecx, len                ; Verifică dacă am afișat toate elementele
    jge .end_print
    mov eax, [res + ecx*4]      ; Încarcă elementul res[ecx]
    push eax                     ; Salvează valoarea în stivă
    push int_fmt                ; Salvează formatul de afișare
    call printf                 ; Afișează numărul
    add esp, 8                  ; Curăță stiva
    inc ecx                     ; Trecem la următorul element
    jmp .loop_print
.end_print:

    ; Încheiem programul


    xor eax, eax                ; Returnează 0
    leave
    ret



b) [3p] Completați conținutul funcției b(void *f) pentru ca aceasta să realizeze un apel la o funcție cu 2 argumente
de tip int și valoare de retur de tip char * prin intermediul pointerului f, primit ca parametru. Cei doi parametri
primiți de f() vor fi valorile globale random1 și random2. Printați rezultatul.

void b(void *f)
{
    // Cast pointerul generic la un pointer către o funcție ce primește doi int și întoarce char*
    char *(*func)(int, int) = (char *(*)(int, int))f;

    // Apelează funcția cu random1 și random2 și printează rezultatul
    printf("%s\n", func(random1, random2));
}




d) [3p] Folosind un tool pentru decompilare, aflați cheia pentru ca funcția c() să conducă la afișarea mesajului
You, dog....

ghidra pe utils.o sau objdump -d utils.o | less


c) [2p] Pentru executabilul file, determinați numele tuturor simbolurilor exportate aflate în zona .bss
readelf -s file | grep '\.bss'
sau
nm file | grep ' [Bb] '
sau
objdump -t file | grep '\.bss'


a) [3p] Fie vectorul de bytes colors ce reține cele 4 culori necesare siteului sub formă RGB, unde grupuri de câte
3 octeți consecutivi formează o culoare. Pentru că cea mai frumoasă culoare este rozul (identificată prin tuplul
255, 50, 255), afișați numărul de apariții a acesteia în vectorul colors.


section .data
    colors db 255, 50, 255, 0, 0, 0, 255, 255, 255, 255, 50, 255
    colors_nr dd 4
; edi va fi adresa de start a vectorului colors
    mov esi, colors
    mov ecx, [colors_nr]     ; numărul de culori
    xor eax, eax             ; eax = 0, contor pentru rozuri

.loop:
    cmp byte [esi], 255
    jne .next
    cmp byte [esi+1], 50
    jne .next
    cmp byte [esi+2], 255
    jne .next

    inc eax                  ; dacă toate 3 componentele corespund, incrementăm

.next:
    add esi, 3               ; trecem la următoarea culoare (3 bytes)
    loop .loop

    push eax
    push msg
    call printf
    add esp, 8


b) [4p] Siteul pe care îl vom scrie în assembly are nevoie de un owner. Acesta este un id nenul, preluat din cel
de-al doilea argument în linie de comandă al programului. Transformați cel de-al doilea argument în linie de
comandă al programului din string în întreg folosind atoi și afișați-l sub forma My id is: <id>, folosind
printf. Dacă programul nu este invocat cu mai mult de un argument, afișați folosind printf mesajul Not
enough arguments.
; accesează argc de pe stivă (la [ebp + 8])
    mov eax, [ebp + 8]
    cmp eax, 2          ; trebuie să fie > 1 (adică cel puțin 2 argumente)
    jl .not_enough

    ; accesează argv de pe stivă (la [ebp + 12])
    mov eax, [ebp + 12] ; eax = argv
    mov eax, [eax + 4]  ; eax = argv[1] (al doilea argument)

    push eax            ; argumentul string pentru atoi
    call atoi           ; returnează int în eax

    push eax            ; id-ul convertit
    push print_id
    call printf
    add esp, 8

    jmp .done

.not_enough:
    push not_enough
    call printf
    add esp, 4


c) [3p] Verificați dacă idul primit ca al doilea argument al programului de la punctul anterior este palindrom. În
cazul în care este, afișați mesajul My id is palindrome, altfel My id is not palindrome.

; argc = [ebp + 8]
    mov eax, [ebp + 8]
    cmp eax, 2
    jl .not_enough  ; se presupune că ai tratat deja cazul cu prea puține argumente

    ; argv = [ebp + 12]
    mov eax, [ebp + 12]
    mov esi, [eax + 4] ; esi = pointer la argv[1] (stringul id)

    ; calculează lungimea șirului
    mov edi, esi        ; edi = pointer la începutul stringului
.len_loop:
    cmp byte [edi], 0
    je .len_done
    inc edi
    jmp .len_loop
.len_done:
    dec edi             ; edi = sfârșitul stringului (ultimul caracter nenul)

.check_loop:
    cmp esi, edi
    jge .is_palindrome  ; dacă s-au intersectat, e palindrom

    mov al, [esi]
    mov bl, [edi]
    cmp al, bl
    jne .not_palindrome

    inc esi
    dec edi
    jmp .check_loop

.is_palindrome:
    push msg_yes
    call printf
    add esp, 4
    jmp .done

.not_palindrome:
    push msg_no
    call printf
    add esp, 4
    jmp .done
